import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pickle
from scipy.integrate import odeint
import math
import seaborn as sn


def sir(y, t, beta, rho, nu, gamma):
    '''
    Basic SIR model with a compartment for infected and unaware (asymptomatic)
    and a compartment for aware (symptomatic).
    Parameters include transmission rate, beta, social distancing factor, rho,
    transition rate from unaware to aware, nu, and recovery rate, gamma.
    A rate of 0.8% death rate is assumed as it matches local data.
    A sigmoid function is used for the social distancing rate as a way
    to "ramp up" social distancing in a matter of days without breaking
    the ODE.
    '''
    phi = tanh(0.0, rho, t, 43)
    ds = -beta*(1-phi)*y[0]*(y[1] + y[2])
    #S = -b(1-p)s(iu+ia)
    diu = beta*(1-phi)*y[0]*(y[1] + y[2]) - nu * y[1]
    #Iu = -b(1-p)s(iu+ia) - niu
    dia = nu * y[1] - gamma*y[2] - .008*y[2]
    #Ia = nIu - gIa - mIa
    dr = gamma*y[2]
    #R = gIa
    dd = 0.008*y[2]
    return [ds, diu, dia, dr, dd]

def tanh(y0, ym, t, tm):
    '''
    Sigmoid function that starts at 0 and plateaus at ym.
    The half way point between 0 and ym will be achieved at tm.
    '''
    return (ym - y0)*(np.tanh(2. * ((t -tm))/tm) + 1) / 2. + y0


def days_to_double(y, t):
    '''
    Calculate the days to double the number of cases
    '''
    expo = 0
    dbl_rt = []
    for i in range(len(y)):
        if y[i] >= 2**expo:
            dbl_rt.append(t[i])
            expo += 1
    return dbl_rt

if __name__ == "__main__":
    '''
    Scenarios currently include projections to June 1st, July 1st, half year 
    (July 28), and full year (January 27).

    '''
    scenarios = {'jun1_sq': [126, 'Projection to June 1st',
                            'Projection of cases to June 1st'],
                'jul1_sq': [156, 'Projection to July 1st',
                            'Projection of cases to July 1st'],
                'halfyr_sq': [183, 'Projection to half year of pandemic', 
                            'Projection of cases to half year of pandemic'],
                'oneyr_sq':[366, 'Projection to one year of pandemic', 
                            'Projection of cases to one year of pandemic'],
                'twoyr_sq': [731, 'Projection to two years of pandemic', 
                            'Projection of cases to two years of pandemic']}

    scenario = scenarios['oneyr_sq']
    scn_t = scenario[0]
    pro_title = scenario[1]
    pro_st_title = scenario[2]
    # Import raw data
    cd_data = pd.read_csv('bc_covid.csv')
    data_rows, data_cols = cd_data.shape
    real_t = np.linspace(0, data_rows-1, data_rows)

    # Model conditions
    y0 = [5071336, 0, 1, 0, 0]
    # t = real_t
    t = np.linspace(0,scn_t,scn_t+1)
    # Retrieve calibrated parameters for model generated by calibration_sir.py
    params = []
    with open('model_params.pkl', 'rb') as file:
        while True:
            try:
                params.append(pickle.load(file))
            except EOFError:
                break

    # print('{}'.format(params))
    # Run ODE 
    y = odeint(sir, y0, t, args=(params[0], params[1], params[2], params[3]))
    # print('{}'.format(y))

    #Calculate doubling rate
    doub_rate = days_to_double(y[:,1:2], t)
    doubles = [2**i for i in range(len(doub_rate))]
    # Plot the curves
    sus = y[:,0]
    inf_ua = y[:,1]
    inf_a = y[:,2]
    rec = y[:,3]
    dead = y[:, 4]
    case_stack = np.vstack([inf_ua, inf_a, rec,dead])
    case_stack_lab = ['Infected, unaware', 'Infected, aware', 'Recovered', 'Dead']

    #Plot setup
    clrs = ['coral', 'orangered', 'limegreen', 'indigo']
    #plots
    plt.plot(t, y[:, 2], '-', color=clrs[0], label='Active Cases')
    plt.plot(t, y[:, 3], '-', color=clrs[1], label='Recovered')
    plt.plot(t, y[:, 4], '-', color=clrs[2], label='Deaths')
    plt.plot(real_t, cd_data['Infected'], '.b', label='Real Cases')
    plt.plot(real_t, cd_data['Recovered'], '.r', label='Real Recovery')
    plt.plot(real_t, cd_data['Dead'], '.g', label='Real Deaths')
    plt.xlabel('Time since Jan 28',{"fontsize":16})
    plt.ylabel('Cases',{"fontsize":16})
    plt.ylim(ymin=0)
    plt.title(pro_title, {'fontsize':18})
    plt.legend()
    plt.show()

    #Stacked plot for total cases
    plt.stackplot(t, case_stack, colors=clrs, labels=case_stack_lab)
    plt.title(pro_st_title, {'fontsize':18})
    plt.xlabel('Time since Jan 28',{"fontsize":16})
    plt.ylabel('Cases',{"fontsize":16})
    plt.ylim(ymin=0)
    plt.legend()
    plt.show()

    #Doubling rate plot
    plt.plot(doubles, doub_rate, color='teal', label='Doubling Rate')
    plt.xscale('log', basex=2)
    plt.yscale('log', basey=2)
    plt.xlabel('Cases',{"fontsize":16})
    plt.ylabel('Time (Days)',{"fontsize":16})
    plt.title('Days taken for cases to double', {'fontsize':18})
    plt.legend()
    plt.show()